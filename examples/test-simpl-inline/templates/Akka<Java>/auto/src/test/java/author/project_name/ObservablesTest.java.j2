package {{author}}.{{project_name}};

import akka.actor.testkit.typed.javadsl.LoggingTestKit;
import akka.actor.testkit.typed.javadsl.ActorTestKit;
import akka.actor.typed.ActorSystem;
import akka.actor.typed.Behavior;
import akka.actor.typed.javadsl.AbstractBehavior;
import akka.actor.typed.javadsl.ActorContext;
import akka.actor.typed.ActorRef;
import akka.actor.typed.javadsl.Adapter;
import akka.actor.typed.javadsl.Behaviors;
import akka.actor.typed.javadsl.Receive;
import com.typesafe.config.ConfigFactory;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

import org.slf4j.event.Level;

import java.util.*;
import io.vavr.*;
import io.vavr.control.*;

import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;

import com.lg4dc.*;
import com.lg4dc.timers.*;
import com.bmartin.*;

import static org.junit.jupiter.api.Assertions.*;

public class ObservablesTest {
    ActorTestKit testKit = null;

    @BeforeEach
    public void setUp() {
        String[] args = new String[2];
        args[0] = "-vp";
        args[1] = "placeA";
        Config config = ConfigFactory.parseString("akka.http.server.preview.enable-http2 = on").withFallback(AbstractMain.get_config(args));
        testKit = ActorTestKit.create("{{system_name}}", config);
    }

    @AfterEach
    public void tearDown() {
        testKit.shutdownTestKit();
    }

{% for guardian_name in target_entrypoints %}
    {% if substring(0,5,guardian_name) == "TestA"%}
    @Test
    public void check_logs_A() throws Exception{
        class Counter {
            public int a_init = 0;
            public int b_init = 0;
            public int a_callback = 0;
            public int c_callback = 0;
        }
        Counter counter = new Counter ();

        LoggingTestKit.messageContains(">")
        .withCustom(
        event ->{
            if(event.level() == Level.DEBUG){
                System.out.println(event.message());
                if(event.message().contains("A > init")){
                    counter.a_init += 1;
                    return true;
                }
                if(event.message().contains("B > init")){
                    counter.b_init += 1;
                    return true;
                }
                else if (event.message().contains("B > callback")){
                    assertEquals(event.message().substring("A > callback ".length()), "42");
                    counter.a_callback += 1;
                    return true;
                }
                else if (event.message().contains("C > callback")){
                    assertEquals(event.message().substring("A > callback ".length()), "21");
                    counter.c_callback += 1;
                    return true;
                }
            }
            return false;
        }
        )
        .withOccurrences​(4)
        .expect(
            testKit.system(),
            () -> {
                ActorRef<SpawnProtocol.Command> kvs1 = testKit.spawn({{author}}.{{project_name}}.{{guardian_name|lower}}.{{guardian_name}}.create(true), "KVS1");

                try{
                    java.lang.Thread.sleep(1);
                }catch(InterruptedException e) {}

                return null;
            });

        assertEquals(counter.a_init, 1, "count init");
        assertEquals(counter.b_init, 1, "count init");
        assertEquals(counter.a_callback, 1, "count callback");
        assertEquals(counter.c_callback, 1, "count callback");
    }
    {% endif %}

    {% if substring(0,5,guardian_name) == "TestB"%}
    @Test
    public void check_logs_B() throws Exception{
        class Counter {
            public int b_init = 0;
            public int b_callback = 0;
            public int c_callback = 0;
        }
        Counter counter = new Counter ();

        LoggingTestKit.messageContains(">")
        .withCustom(
        event ->{
            if(event.level() == Level.DEBUG){
                System.out.println(event.message());
                if(event.message().contains("B > init")){
                    counter.b_init += 1;
                    return true;
                }
                else if (event.message().contains("B > callback")){
                    assertEquals(event.message().substring("A > callback ".length()), "42");
                    counter.b_callback += 1;
                    return true;
                }
                else if (event.message().contains("C > callback")){
                    assertEquals(event.message().substring("A > callback ".length()), "21");
                    counter.c_callback += 1;
                    return true;
                }
            }
            return false;
        }
        )
        .withOccurrences​(3)
        .expect(
            testKit.system(),
            () -> {
                ActorRef<SpawnProtocol.Command> kvs1 = testKit.spawn({{author}}.{{project_name}}.{{guardian_name|lower}}.{{guardian_name}}.create(true), "KVS1");

                try{
                    java.lang.Thread.sleep(1);
                }catch(InterruptedException e) {}

                return null;
            });

        assertEquals(counter.b_init, 1, "count init");
        assertEquals(counter.b_callback, 1, "count callback");
        assertEquals(counter.c_callback, 1, "count callback");
    }
    {% endif %}

    {% if substring(0,5,guardian_name) == "TestC"%}
    @Test
    public void check_logs_C() throws Exception{
        class Counter {
            public int init = 0;
            public int listening = 0;
            public int starting = 0;
            public int callback = 0;
        }
        Counter counter = new Counter ();

        LoggingTestKit.messageContains(">")
        .withCustom(
        event ->{
            if(event.level() == Level.DEBUG){
                System.out.println(event.message());
                if(event.message().contains("A > init")){
                    counter.init += 1;
                    return true;
                }
                else if(event.message().contains("A > listening")){
                    counter.listening += 1;
                    return true;
                }
                else if(event.message().contains("A > starting")){
                    counter.starting += 1;
                    return true;
                }
                else if (event.message().contains("A > callback")){
                    if(counter.callback == 0)
                        assertEquals(event.message().substring("A > callback ".length()), "42");
                    if(counter.callback == 1)
                        assertEquals(event.message().substring("A > callback ".length()), "21");
                    counter.callback += 1;
                    return true;
                }
            }
            return false;
        }
        )
        .withOccurrences​(6)
        .expect(
            testKit.system(),
            () -> {
                ActorRef<SpawnProtocol.Command> kvs1 = testKit.spawn({{author}}.{{project_name}}.{{guardian_name|lower}}.{{guardian_name}}.create(true), "KVS1");

                try{
                    java.lang.Thread.sleep(1);
                }catch(InterruptedException e) {}

                return null;
            });

        assertEquals(counter.init, 2, "count init");
        assertEquals(counter.listening, 1, "count listening");
        assertEquals(counter.starting, 1, "count starting");
        assertEquals(counter.callback, 2, "count callback");
    }
    {% endif %}
{% endfor %}
}
