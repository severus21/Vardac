event ping of;
event pong of;

protocol p_pingpong = !ping?pong!ping.;

(********************* PingPong *********************)
@capturable([MsgCounter])
component A {
    string id = "";
    onstartup (bridge<B, A, inline p_pingpong> chan, string id){
        print("> Starting A");
        bind(this.p_in, chan);
        this.id = id;
    }

    inport p_in :: bridge<B, A, inline p_pingpong> expecting (dual p_pingpong) = this.handle_ping;

    result<void, error> handle_ping (ping msg, !pong?ping. s1) {
        print("ping on A "+this.id);
        ?ping. s = fire(s1, pong())?; 
        tuple<ping, .> res_A = receive(s);
        print("ping2 on A "+this.id);
    }
}

component B {
    outport p_out expecting (inline p_pingpong);

    onstartup (bridge<B, A, inline p_pingpong> chan, activation_ref<A> b) {
        bind(this.p_out, chan);
        for(int i in range(0,2)){
            this.methodb(b);
        }
    }

    result<void, error> methodb(activation_ref<A> b){
        print("> Starting B");
        session<p_pingpong> s0 = initiate_session_with(this.p_out, b);

        ?pong!ping. s1 = fire(s0, ping())?;
        print("> Ping fired");
        tuple<pong, !ping.> res = receive(s1);
        print("pong_or_timeout");
        . s2 = fire(res._1, ping())?;
        print("> Ping2 fired");
    }
}


    (* Orchestration logic *)
component PingPong {
    (* FIXME TODO specialized MsgCounter is not subtype of MsgCounter in Java,
        HOT FIX replace MsgCounter by Any
    *)

    option<activation_ref<any>> interceptori = none; 

    activation_ref<MsgCounter> make_interceptor (
        option<place> -> activation_ref<any> factory,
        string intercepted_component_schema,
        place p_of_intercepted
    ){
        if(is_none(this.interceptori)){
            place p = current_place();
            this.interceptori = some(factory(some(p)));
        }
        return option_get(this.interceptori);
    }
    
    (*
    FIXME spawn interceptor hang for ever; the issue comes from the spawnprotocol somewhere
    and not from the interception code
    activation_ref<MsgCounter> make_amnesic_interceptor (
        option<place> -> activation_ref<any> factory,
        string intercepted_component_schema,
        place p_of_intercepted
    ){
        place p = current_place();
        return factory(some(p));
    }
    *)

    onstartup () {
        bridge<B, A, inline p_pingpong> bridge0 = bridge(p_pingpong);

        (* First group *) 
        with<MsgCounter> this.make_interceptor{
            activation_ref<A> a = spawn A(bridge0, "a");
            activation_ref<A> aaa = spawn A(bridge0, "aaa");
            activation_ref<A> aaaaa = spawn A(bridge0, "aaaaa");
        }
        activation_ref<B> b = spawn B(bridge0, a);
        activation_ref<B> b = spawn B(bridge0, aaa);

        with<MsgCounter, anonymous> this.make_interceptor{
            activation_ref<A> aa = spawn A(bridge0, "aa");
            activation_ref<A> aaaa = spawn A(bridge0, "aaaa");
        }
        activation_ref<B> bb = spawn B(bridge0, aa);

        (* Third group - TODO low-level api *)
    }
}
(********************* Interception logic *********************)

(*
    TODO write a msg counter - independent of msg
*)
component MsgCounter {
    int nbr_msg = 0;
    onstartup () {
        print(">MsgCounter"); (* count ping *)
    }

    (****************************** Programmer defined state and state handling ******************************)
    void incr(){
        this.nbr_msg = this.nbr_msg + 1;
    }

    (****************************** Activation onboarding ******************************)
    @onboard([A]) (* List of schemas that can be onboarded by the method *)
    bool onboard_A(activation_ref<A> a, place p_of_a){
        print("Onboarding activation of A");
        return true;
    }

    (****************************** Session interception  ******************************)
    @sessioninterceptor(true, both)
    result<option<activation_ref<A>>,error> my_session_interceptor_a(
        dict<activation_id, activation_ref<A>> onboarded_activations, 
        activation_ref<B> from, 
        bridge<B, A, inline p_pingpong> b_other_side, 
        string requested_to_schema, 
        ping msg
    ){
        print("Intercepted session init (anonymous_mod)");
        (*  assert onboarded_activations > 1 
            since this do not create activations to process request
        *)
        activation_ref<A> a = pick(onboarded_activations);
        return ok(some(a));
    }

    @sessioninterceptor(false, both)
    result<option<activation_ref<A>>,error> my_session_interceptor_b(
        dict<activation_id, activation_ref<A>> onboarded_activations, 
        activation_ref<B> from, 
        bridge<B, A, inline p_pingpong> b_other_side, 
        activation_ref<A> requested_to, 
        ping msg
    ){
        print("Intercepted session init (no-anonymous_mod)");
        return ok(some(requested_to));
    }

    (****************************** Msg interception  ******************************)
    (* TODO need polymorphism *)
    @msginterceptor(both)
    result<?pong.,error> intercept_ping(
        activation_ref<B> from, 
        activation_ref<A> to, 
        ?pong!ping. continuation_in, 
        !ping?pong!ping. continuation_out, 
        ping msg
    ){
        this.incr();
        
        print("Counted ping1");
        print(this.nbr_msg);

        ?pong!ping. s_out = fire(continuation_out, msg)?;

        return ok(s_out);
    }
}


(********************* Guardians and entry points *********************)

component Orchestrator {
    onstartup () {
        spawn PingPong();
    }
}

void titia (array<string> args){
    print("Main");
}
