use benchmarks.libbench;

event startmsg of array<int>, int, bool, long; (* array * i * warmup * init_timestamp*)
event resultmsg of array<int>, int, int, bool, long; (* array, side, ... *)
protocol p_merge = !startmsg?resultmsg.;
bridge<Master|Sorter, Sorter, inline p_merge> b0 = bridge(p_merge);

void print_output(array<int> input_array, array<int> result_array);
void print_array(array<int> input_array);

(* 

Mono JVM

1) 
*)

array<int> generate_random_input(int size);
bool is_sort(array<int> array);
array<int> merge(array<int> a, array<int> b);
array<int> splitleft(array<int> a);
array<int> splitright(array<int> a);
array<array<int>> init_matrix(int n);

component Master {
    outport p_out expecting (inline p_merge);
    inport p_in :: bridge<Master|Sorter, Sorter, inline p_merge> expecting ?resultmsg. = this.callback;

    int n = 0;
    int warmup = 0;
    int warmup_counter = 0;
    int counter = 0;
    long starttime = 0;
    array<long> rtts = [||];

    array<int> input = [||];

    onstartup (int n, int warmup, array<int> input, bridge<Master|Sorter, Sorter, inline p_merge> b0) {
        debug("> Starting Master");
        this.n = n;
        this.warmup = warmup;
        this.input = input;

        bind(this.p_out, b0);
        bind(this.p_in, b0);

        this.starttime = time();
        this.rtts = [|n|]; (*array of size n*)
        if(this.warmup > 0 ){
            this.start_warmup();
        } else {
            print(">No warmup");
            this.start();
        }
    }

    result<void, error> start_warmup(){
        for(int i in range(0, this.warmup)){
            activation_ref<Sorter> sorter = spawn Sorter(-1, bridgeof(this.p_out));
            session<p_merge> s0 = initiate_session_with(this.p_out, sorter);
            ?resultmsg. s1 = fire(s0, startmsg(this.input, i, true, time()))?; 
        }
    }

    result<void, error> start(){
        for(int i in range(0, this.n)){
            print("> Run start once");
            activation_ref<Sorter> sorter = spawn Sorter(-1, bridgeof(this.p_out));
            session<p_merge> s0 = initiate_session_with(this.p_out, sorter);
            ?resultmsg. s1 = fire(s0, startmsg(this.input, i, false, time()))?; 
        }
    }

    

    void sumup(array<int> res){
        long start = this.starttime;
        long end = time();
        long elapse = end - start;
        string tmp = long_to_string(elapse);
        info("Time elapse "+tmp+" ms");

        dict<string, java_object> res = dict();
        add2dict(res, "rtts", this.rtts);
        tojson(res, "results.json");

        info("Terminated ueyiqu8R");
        info("JamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglogJamminglog");
        print_output(this.input, res);
    }

    (* 
        TODO TODO contract sumup
        ensures is_sort(res)
    *)

    result<void, error> callback(resultmsg msg, . s){
        if(msg._3_){
            this.warmup_counter = this.warmup_counter + 1;
            string x = int_to_string(this.warmup_counter);
            print("warmup_counter "+x);

            // Last pong
            if( this.warmup_counter == this.warmup ){
                this.start();
            }
        } else {
            this.counter = this.counter + 1;
            long endTimestamp = time();
            print(int_to_string(msg._2_));
            aput(this.rtts, msg._2_, endTimestamp - msg._4_);

            // Last pong
            (* TODO multiple stmts in an if => unable to parse *)
            if( this.counter == this.n ){
                this.sumup(msg._0_);
            }
        }

        return ok(());
    }
}

component Sorter {
    int side = -1;
    array<array<int>> res = init_matrix(2);

    inport p_in :: bridge<Master | Sorter, Sorter, inline p_merge> expecting (dual p_merge) = this.callback;
    inport p_in_result :: bridge<Master | Sorter, Sorter, inline p_merge> expecting ?resultmsg. = this.onResult;
    outport p_out expecting p_merge;

    !resultmsg. upstream = ();

    onstartup (int side, bridge<Master|Sorter, Sorter, inline p_merge> b0){
        debug("> Starting Sorter");
        bind(this.p_in, b0);
        bind(this.p_in_result, b0);
        bind(this.p_out, b0);

        this.res = init_matrix(2);
        this.side = side;
    }

    result<void, error> callback (startmsg start, ?resultmsg. s0) {
        this.upstream = s0;

        if( asize(start._0_) == 1){
            fire(s0, resultmsg(
                start._0_, this.side, start._1_, start._2_, start._3_
            ))?;
        } else {
            array<int> left = splitleft(start._0_);
            array<int> right = splitright(start._0_);

            activation_ref<Sorter> a = spawn Sorter(0, bridgeof(this.p_in));
            activation_ref<Sorter> b = spawn Sorter(1, bridgeof(this.p_in));

            session<p_merge> s_a = initiate_session_with(this.p_out, a);
            session<p_merge> s_b = initiate_session_with(this.p_out, b);

            fire(s_a, startmsg(left, start._1_, start._2_, start._3_))?;
            fire(s_b, startmsg(right, start._1_, start._2_, start._3_))?;
        }

        return ok(());
    }

    contract callback 
    invariant 0 == 0 
    ensures "a" == "a"
    returns (res : result<void, error> -> is_ok(res) )

    result<void, error> onResult(resultmsg result, . s){
        aput(this.res, result._1_, result._0_);

        if((aget(this.res, 0) != ()) && (aget(this.res, 1) != ())){
            array<int> resultarray = merge(aget(this.res, 0), aget(this.res, 1));
            fire(this.upstream, resultmsg(resultarray, this.side, result._2_, result._3_, result._4_))?;
        }
    }

    contract onResult
    invariant 0 == 0 
    ensures "a" == "a"
    returns (ress : result<void, error> -> is_ok(ress) )
}

tuple<array<string>, tuple<int,int, int>> main (array<string> args){
    print("apossiblemain");
    int n = 100;
    int warmup = 100;
    int size = 2;

    list<string> nargs = [];
    int skip = -1;
    for(int i in range(0, asize(args) - 1)){
        if( ((aget(args, i)) == "-n") && ((i - 1)< asize(args)) ){
            n = int_of_string(aget(args, i+1));
            skip = i + 1;
        } else { 
            if( ((aget(args, i)) == "-warmup") && ((i - 1)< asize(args)) ){
                warmup = int_of_string(aget(args, i+1));
                skip = i + 1;
            } else {
                if( ((aget(args, i)) == "-vs") && ((i - 1)< asize(args)) ){
                    size = int_of_string(aget(args, i+1));
                    skip = i + 1;
                } else {
                    if (i != skip) {
                        append(nargs, aget(args, i));
                    }
                }
            }
        }
    }
    return (list2array(nargs), (n, warmup, size));
}

component TopLevel {
    onstartup (int n, int warmup, int size) {
        print(">> Entering toplevel");
        bridge<Master|Sorter, Sorter, inline p_merge> b0 = bridge(p_merge);
        activation_ref<Master> m = (spawn Master(n, warmup, generate_random_input(size), b0));
        print(">> Ending toplevel");
    }
}