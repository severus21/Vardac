
target akka;

impl dependencies gradle:{=
=}

impl headers java:{=
    import java.util.Arrays;
    import java.util.Random;
    import java.util.stream.IntStream;
=}



impl function generate_random_input java:{=
    //deterministic since the seed is controled, only depends on size() value

    Random random = new Random(0L); 
    return new ArrayList<Integer>(IntStream.range(0, 1 <<  size ).map(i -> random.nextInt()).boxed().collect(Collectors.toList()));
=}
impl function is_sort java:{=
    if({{%array%}}.size() == 0)
        return true;

    int last = {{%array%}}.get(0);
    for(int i: {{%array%}}){
        if(last > i)
            return false;
        last = i;
    }

    return true;
=}

impl function merge java:{=
    int k = {{%a%}}.size() + {{%b%}}.size();
    ArrayList<Integer> answer = new ArrayList(Collections.nCopies(k, null));
    int i = {{%a%}}.size() - 1, j = {{%b%}}.size() - 1;

    while (k > 0){
        if(j < 0 || (i >= 0 && {{%a%}}.get(i) >= {{%b%}}.get(j))){
            answer.set(--k, {{%a%}}.get(i--));
        } else {
            answer.set(--k, {{%b%}}.get(j--));
        }
    }

    for(Integer u: {{%a%}})/* #debug */
        assert(u!=null);/* #debug */
    for(Integer v: {{%b%}})/* #debug */
        assert(v!=null);/* #debug */
    for(Integer w: answer)/* #debug */
        assert(w!=null);/* #debug */

    return answer;
=}

impl function splitleft java:{=
    return new ArrayList({{%a%}}.subList(0, {{%a%}}.size() / 2));
=}

impl function splitright java:{=
    return new ArrayList({{%a%}}.subList({{%a%}}.size() / 2, {{%a%}}.size()));
=}

impl function init_matrix java:{=
      return new ArrayList<ArrayList<Integer>>( Collections.nCopies({{%n%}}, null) );
=}

(* #bench *)impl function print_array java:{=
    String buffer = "\n\n\ninput_vector<";/* #bench */ 
    buffer += {{%input_array%}}.size()+"> = [";/* #bench */ 
    for(Integer i: {{%input_array%}}){/* #bench */ 
        buffer += i.toString()+",";	/* #bench */ 
    }/* #bench */ 
    buffer += "]";/* #bench */ 
    System.out.println(buffer);/* #bench */ 
    return null;/* #bench */ 
=}(* #bench *)

(* #bench *)impl function print_output java:{=
    String buffer = "\n\n\ninput_vector = [";/* #bench */ 
    buffer += {{%input_array%}}.toString();/* #bench */ 
    buffer += "]";/* #bench */ 
    buffer += "\nsorted_vector = [";/* #bench */ 
    buffer += {{%result_array%}}.toString();/* #bench */ 
    buffer += "]\n\n\n";/* #bench */ 
    System.out.println(buffer);/* #bench */ 
    return null;/* #bench */ 
=}(* #bench *)

impl component Master {}
impl component Sorter {}
impl component TopLevel {}
