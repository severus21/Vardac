
target akka;

impl dependencies gradle:{=
    implementation 'com.google.code.gson:gson:2.9.0'
=}

impl headers java:{=
    import java.io.FileWriter;
    import java.io.IOException;
    import com.google.gson.Gson;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.stream.IntStream;
=}


impl function arrayof java:{=
    return new ArrayList<>({{%n%}});
=}
impl function intarrayof java:{=
    return new ArrayList<>({{%n%}});
=}

impl function generate_random_input java:{=
    //deterministic since the seed is controled, only depends on size() value

    Random random = new Random(0L); 
    return new ArrayList(Arrays.asList(IntStream.range(0, 1 << {{%size%}}).map(i -> random.nextInt()).toArray()));
=}
impl function is_sort java:{=
    if({{%array%}}.size() == 0)
        return true;

    int last = {{%array%}}.get(0);
    for(int i: {{%array%}}){
        if(last > i)
            return false;
        last = i;
    }

    return true;
=}

impl function merge java:{=
    ArrayList<Integer> answer = new ArrayList({{%a%}}.size() + {{%b%}}.size());
    int i = {{%a%}}.size() - 1, j = {{%b%}}.size() - 1, k = answer.size();
    while (k > 0)
        if(i >= 0 && {{%a%}}.get(i) >= {{%b%}}.get(j))
            answer.add(--k, {{%a%}}.get(i--));
        else
            answer.add(--k, {{%b%}}.get(j--));
    return answer;
=}

impl function splitleft java:{=
    return new ArrayList({{%a%}}.subList(0, {{%a%}}.size() / 2));
=}

impl function splitright java:{=
    return new ArrayList({{%a%}}.subList({{%a%}}.size() / 2, {{%a%}}.size()));
=}
impl function init_matrix java:{=
    return new ArrayList<ArrayList<Integer>>({{%n%}});
=}

impl function tojson java:{=
    Gson gson = new Gson();

    try {
        FileWriter fileWriter = new FileWriter({{%filename%}}); 
        gson.toJson({{%rtts%}}, fileWriter);
        fileWriter.close();
        return Either.right(null);
    } catch (IOException e ){
        System.err.println(e.toString());
        return Either.left(new com.lg4dc.Error(e.toString()));
    }
=}

impl component Master {}
impl component Sorter {}
impl component TopLevel {}
